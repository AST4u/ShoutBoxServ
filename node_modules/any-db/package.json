{
  "name": "any-db",
  "version": "0.1.4",
  "description": "Database-agnostic connection pooling, querying, and result sets",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db.git"
  },
  "author": "",
  "keywords": [
    "mysql",
    "postgres",
    "pg",
    "sqlite",
    "sqlite3"
  ],
  "license": "BSD",
  "dependencies": {
    "generic-pool": "~2.0.0"
  },
  "devDependencies": {
    "sqlite3": "~2.1.5",
    "pg": "~0.8.2",
    "mysql": "~2.0.0-alpha3",
    "tap": "~0.3.0"
  },
  "readme": "# any-db - a less-opinionated database abstraction layer.\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db)\n\nThe purpose of this library is to consolidate the behaviours of various database\ndrivers into a minimal and consistent API. See the [design\ndocument](https://github.com/grncdr/node-any-db/blob/master/DESIGN.md) for a\nthorough overview of the planned API.\n\nThings it does:\n\n * Supports MySQL, Postgres, and SQLite3 as equally as possible.\n * Specify connection parameters with URLs: `driver://user:pass@host/database`\n * Stream results or get them all at once, using an interface almost identical\n\t to the existing evented interfaces of the MySQL and Postgres drivers.\n * Simple connection pooling including the ability to execute queries against\n\t the pool directly for auto-release behaviour. E.g. this will never leak\n\t connections: `pool.query(\"SELECT 1\", function (err, results) { ... })`\n * Exposes a uniform transaction API.\n * Uses one style of parameter placeholders (Postgres-style $n or $named) with\n   all drivers.\n\nThings it will do soon:\n\n * Have more and more tests.\n * Provide a common result set API.\n\nThings it might do:\n * Wrap errors.\n\nThings it will never do:\n\n * Add it's own query helper methods like `.first` or `.fetchAll`\n * Include any sort SQL string building. You might want to try my other library\n\t [gesundheit](https://github.com/BetSmartMedia/gesundheit), or one of the many\n\t [alternatives](https://encrypted.google.com/search?q=sql&q=site:npmjs.org&hl=en)\n\t for that.\n\n## Usage\n\nCreating a connection:\n\n\tvar anyDB = require('any-db')\n\t  , conn = anyDB.createConnection('postgres://user:pass@localhost/dbname')\n\nSimple queries with callbacks are exactly what you'd expect:\n\n\tconn.query(\"SELECT * FROM my_table LIMIT 10\", function (err, result) {\n\t  for (var i in result.rows) {\n\t    console.log(\"Row \" + i + \": %j\", rows[i])\n\t  }\n\t})\n\nIf no callback is provided, the query object returned will emit the following\nevents:\n\n\tvar query = conn.query('SELECT * FROM my_table')\n\tquery.on('fields', function (fields) { /* fields is an array of field names */ })\n\tquery.on('row', function (row) { /* row is plain object */ })\n\tquery.on('end', function () { /* always emitted when results are exhausted */ })\n\tquery.on('error', function () { /* emitted on errors :P */ })\n\nTo use bound parameters simply pass an array as the second argument to query:\n\n\tconn.query('SELECT * FROM users WHERE gh_username = $1', ['grncdr'])\n\nYou can also use named parameters by passing an object instead:\n\n\tconn.query('SELECT * FROM users WHERE gh_username = $username', {username: 'grncdr'})\n\nAny-db doesn't do any parameter escaping on it's own, so you can use any\nadvanced parameter escaping features of the underlying driver exactly as though\nany-db wasn't there.\n\n### Connection pools\n\nYou can create a connection pool with `anyDB.createPool`:\n\n\tvar pool = anyDB.createPool('postgres://user:pass@localhost/dbname', {\n\t  min: 5,  // Minimum connections\n\t  max: 10, // Maximum connections\n\t  onConnect: function (conn, ready) {\n\t    /*\n\t    perform any necessary connection setup before calling ready(err, conn)\n\t    */\n\t  },\n\t  reset: function (conn, ready) {\n\t    /*\n\t    perform any necessary reset of connection state before the connection can\n\t    be re-used. The default callback does conn.query(\"ROLLBACK\", ready)\n\t    */\n\t  }\n\t})\n\nA connection pool has a `query` method that acts exactly like the one on\nconnections, but the underlying connection is returned to the pool when the\nquery completes.\n\n### Transactions\n\nBoth connections and pools have a `begin` method that starts a new transaction\nand returns a `Transaction` object. Transaction objects behave much like\nconnections, but instead of an `end` method, they have `commit` and `rollback`\nmethods. Additionally, an unhandled error emitted by a transaction query will\ncause an automatic rollback of the transaction before being re-emitted by the\ntransaction itself.\n\nHere's an example where we stream all of our user ids, check them against an\nexternal abuse-monitoring service, and flag or delete users as necessary, if\nfor any reason we only get part way through, the entire transaction is rolled\nback and nobody is flagged or deleted:\n\n\tvar tx = pool.begin()\n\n\ttx.on('error', finished)\n\n\t/*\n\tWhy query with the pool and not the transaction?\n\tBecause it allows the transaction queries to begin executing immediately,\n\trather than queueing them all up behind the initial SELECT.\n\t*/\n\tpool.query('SELECT id FROM users').on('row', function (user) {\n\t\tif (tx.state() == 'rolled back') return\n\t\tabuseService.checkUser(user.id, function (err, result) {\n\t\t\tif (err) return tx.handleError(err)\n\t\t\t// Errors from these queries will propagate up to the transaction object\n\t\t\tif (result.flag) {\n\t\t\t\ttx.query('UPDATE users SET abuse_flag = 1 WHERE id = $1', [user.id])\n\t\t\t} else if (result.destroy) {\n\t\t\t\ttx.query('DELETE FROM users WHERE id = $1', [user.id])\n\t\t\t}\n\t\t})\n\t}).on('error', function (err) {\n\t\ttx.handleError(err)\n\t}).on('end', function () {\n\t\ttx.commit(finished)\n\t})\n\n\tfunction finished (err) {\n\t\tif (err) console.error(err)\n\t\telse console.log('All done!')\n\t}\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "any-db@0.1.4",
  "dist": {
    "shasum": "62bd04c6dc121b1018e2ff3f688e0d273b26ad0a"
  },
  "_from": "any-db"
}
